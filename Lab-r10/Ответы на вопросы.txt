1. Перечислите стандартные коллекции NET Framework.
Stack<T>, Queue<T>, HashSet<T>, List<T>,
Dictionary<Tkey, TValue>, LinkedList<T>, SortedDictionary<TKey, TValue>,
SortedList<TKey, TValue>, SortedSet<T>

2. Поясните принцип работы коллекции:
a)Stack<T>
Создает стек. Обеспечивает такие же функциональные возможности, как и
необобщенный класс Stack

b)Queue<T>
Создает очередь. Обеспечивает такие же функциональные возможности, как и
необобщенный класс Queue

c)HashSet<T>
Сохраняет ряд уникальных значений, используя хештаблицу

d)List<T>
Создает динамический массив. Обеспечивает такие же функциональные
возможности, как и необобщенный класс ArrayList

e)Dictionary<Tkey, TValue>
Сохраняет пары "ключ-значение". Обеспечивает такие же функциональные
возможности, как и необобщенный класс Hashtable

f) LinkedList<T>
Сохраняет элементы в двунаправленном списке

g)SortedDictionary<TKey, TValue>
Создает отсортированный список из пар "ключ-значение"

h)SortedList<TKey, TValue>
Создает отсортированный список из пар "ключ-значение". Обеспечивает такие
же функциональные возможности, как и необобщенный класс SortedList

i) SortedSet<T>
Создает отсортированное множество


3. Охарактеризуйте необобщенные, специальные, с поразрядной организацией,
обобщенные и параллельные коллекции.

Необобщенные коллекции
Реализуют ряд основных структур данных, включая динамический массив,
стек, очередь, а также словари, в которых можно хранить пары "ключ-значение". В
отношении необобщенных коллекций важно иметь в виду следующее: они оперируют
данными типа object. Таким образом, необобщенные коллекции могут служить для
хранения данных любого типа, причем в одной коллекции допускается наличие
разнотипных данных. Очевидно, что такие коллекции не типизированы, поскольку в
них хранятся ссылки на данные типа object. Классы и интерфейсы необобщенных
коллекций находятся в пространстве имен System.Collections.

Специальные коллекции
Оперируют данными конкретного типа или же делают это каким-то особым
образом. Например, имеются специальные коллекции для символьных строк, а также
специальные коллекции, в которых используется однонаправленный список.
Специальные коллекции объявляются в пространстве
имен System.Collections.Specialized.

Поразрядная коллекция
В прикладном интерфейсе Collections API определена одна коллекция с
поразрядной организацией — это BitArray. Коллекция типа BitArray поддерживает
поразрядные операции, т.е. операции над отдельными двоичными разрядами,
например И, ИЛИ, исключающее ИЛИ, а следовательно, она существенно отличается
своими возможностями от остальных типов коллекций. Коллекция типа BitArray
объявляется в пространстве имен System.Collections.

Обобщенные коллекции
Обеспечивают обобщенную реализацию нескольких стандартных структур
данных, включая связные списки, стеки, очереди и словари. Такие коллекции
являются типизированными в силу их обобщенного характера. Это означает, что в
обобщенной коллекции могут храниться только такие элементы данных, которые
совместимы по типу с данной коллекцией. Благодаря этому исключается случайное
несовпадение типов. Обобщенные коллекции объявляются в пространстве
именSystem.Collections.Generic.

Параллельные коллекции
Поддерживают многопоточный доступ к коллекции. Это обобщенные
коллекции, определенные в пространстве имен System.Collections.Concurrent.

4. Какие интерфейсы используются в коллекциях C#?

В пространстве имен System.Collections.Generic определен целый ряд
интерфейсов обобщенных коллекций, имеющих соответствующие аналоги среди
интерфейсов необобщенных коллекций:
ICollection<T>
Определяет основополагающие свойства обобщенных коллекций
IComparer<T>
Определяет обобщенный метод Compare() для сравнения объектов, хранящихся
в коллекции
IDictionary<Tkey, TValue>
Определяет обобщенную коллекцию, состоящую из пар "ключ-значение"
IEnumerable<T>
Определяет обобщенный метод GetEnumerator(), предоставляющий
перечислитель для любого класса коллекции

Enumerator<T>
Предоставляет методы, позволяющие получать содержимое коллекции по
очереди
IEqualityComparer<T>
Сравнивает два объекта на предмет равенства
IList<T>
Определяет обобщенную коллекцию, доступ к которой можно получить с
помощью индексатора
В пространстве имен System.Collections.Generic определена структура
KeyValuePair<TKey, TValue> Она служит для хранения ключа и его значения и
применяется в классах обобщенных коллекций, в которых хранятся пары "ключ-
значение", как, например, в классе Dictionary<TKey, TValue> В этой структуре
определяются два следующих свойства:

	public ТКеу Key { get; };
	public TValue Value { get; };

В этих свойствах хранятся ключ и значение соответствующего элемента
коллекции.

5. Для чего используется интерфейс IComparable?

Предоставляет метод для сравнения двух объектов определенного типа является роль IComparable . Это необходимо в том случае, если нужно предоставить все возможности сортировки для объекта. Рассматривайте как порядок сортировки по умолчанию для объектов IComparable . Например если массив объектов этого типа, и вызвать метод сортировки для этого массива, IComparable предоставляет сравнения объектов во время сортировки. При реализации интерфейса IComparable , необходимо реализовать метод CompareTo следующим образом:

// Implement IComparable CompareTo method - provide default sort order.
int IComparable.CompareTo(object obj)
{
   car c=(car)obj;
   return String.Compare(this.make,c.make);

}
Сравнения в методе отличается в зависимости от типа данных, который сравнивается значение. String.Compare используется в этом примере, так как свойство, выбранное для сравнения является строкой.

6. Что содержит интерфейс IEnumerator или обобщенный интерфейс
IEnumerator<T>? Где и как его можно использовать?

Предоставляет методы, позволяющие получать содержимое коллекции по
очереди

7. Что такое наблюдаемая коллекция? Где и каким образом ее можно
использовать?

