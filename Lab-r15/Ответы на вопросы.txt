1. Что такое процесс, домен, поток? Как они связаны между собой?

Поток предствляет некоторую часть кода программы. При выполнении программы каждому потоку выделяется определенный квант времени. 
И при помощи многопоточности мы можем выделить в приложении несколько потоков, которые будут выполнять различные задачи одновременно.

При запуске приложения, написанного на C#, операционная система создает процесс, а среда CLR создает внутри этого процесса логический 
контейнер, который называется доменом приложения и внутри которого работает запущенное приложение.

Во-первых, использование доменов внутри одного процесса позволяет изолировать отдельные задачи. Во-вторых, если мы загружаем в 
основной первичный домен библиотеку для выполнения каких-то вычислений, то мы ее не можем выгрузить обратно. Выгрузить мы можем 
только весь домен. Если же мы создадим вторичный домен, загрузим в него для вычислений библиотеку и после окончания вычислений 
выгрузим вторичный домен из памяти, то тем самым мы можем увеличить производительность и оптимизировать работу приложения.

2. Как получить информацию о процессах?

Process[] process = Process.GetProcesses();
Далее перебирать все элементы массива и получать необходмые поля каждого из них.

3. Как создать и настроить домен?

Для управления домена платформа .NET предоставляет класс AppDomain. Рассмотрим некоторые основные методы и свойства данного класса:

Свойство BaseDirectory: базовый каталог, который используется для получения сборок (как правило, каталог самого приложения)

Свойство CurrentDomain: домен текущего приложения

Свойство FriendlyName: имя домена приложения

Свойство SetupInformation: представляет объект AppDomainSetup и хранит конфигурацию домена приложения

Метод CreateDomain(): статический метод, позволяющий создать новый домен приложения в рамках текущего процесса

Метод CreateInstance(): создает экземпляр типа из внешней сборки после ее загрузки в домен приложения

Метод ExecuteAssembly(): запускает сборку exe в рамках текущего домена приложения

Метод GetAssemblies(): получает набор сборок .NET, загруженных в домен приложения

Метод Load(): загружает сборку домена приложения

Метод Unload(): выгружает домен приложения из определенного процесса

4. Как создать и настроить поток?

Класс Thread определяет ряд методов и свойств, которые позволяют управлять потоком и получать информацию о нем. Основные свойства класса:

Статическое свойство CurrentContext позволяет получить контекст, в котором выполняется поток

Статическое свойство CurrentThread возвращает ссылку на выполняемый поток

Свойство IsAlive указывает, работает ли поток в текущий момент

Свойство IsBackground указывает, является ли поток фоновым

Свойство Name содержит имя потока

Свойство Priority хранит приоритет потока - значение перечисления ThreadPriority

Свойство ThreadState возвращает состояние потока - одно из значений перечисления ThreadState

Некоторые методы класса Thread:

Статический метод GetDomain возвращает ссылку на домен приложения

Статический метод GetDomainId возвращает id домена приложения, в котором выполняется текущий поток

Статический метод Sleep останавливает поток на определенное количество миллисекунд

Метод Abort уведомляет среду CLR о том, что надо прекратить поток, однако прекращение работы потока происходит не сразу, а 
только тогда, когда это становится возможно. Для проверки завершенности потока следует опрашивать его свойство ThreadState

Метод Interrupt прерывает поток на некоторое время

Метод Join блокирует выполнение вызвавшего его потока до тех пор, пока не завершится поток, для которого был вызван данный метод

Метод Resume возобновляет работу ранее приостановленного потока

Метод Start запускает поток

Метод Suspend приостанавливает поток

5. В каких состояниях может быть поток?

Статусы потока содержатся в перечислении ThreadState:

Aborted: поток остановлен, но пока еще окончательно не завершен

AbortRequested: для потока вызван метод Abort, но остановка потока еще не произошла

Background: поток выполняется в фоновом режиме

Running: поток запущен и работает (не приостановлен)

Stopped: поток завершен

StopRequested: поток получил запрос на остановку

Suspended: поток приостановлен

SuspendRequested: поток получил запрос на приостановку

Unstarted: поток еще не был запущен

WaitSleepJoin: поток заблокирован в результате действия методов Sleep или Join

6. Какие методы управления потоками вы знаете, для чего и как их использовать?

7. Какие приоритеты потока вы знаете?

Приоритеты потоков располагаются в перечислении ThreadPriority:

Lowest

BelowNormal

Normal

AboveNormal

Highest

8. Что такое пул потоков и для чего он используется?

Набор потоков. Можно создать заранее и вызывать по мере необходмости. Также можно менять кол-во потоков в пуле при необходимости.

9. Что такое критическая секция? Поясните использование.

lock (locker)
{
  < Критическая секция>
}

Код внутри блокируется и недоступен для других потоков до завершения работы других потоков.

10.Что такое мьютекс? Поясните использование

Поток выполняет код внутри мьютекса если объект мьютекса свободен. Если объект занят - ждёт, пока он освободится.

11.Что такое семафор? Поясните использование

Ограничивает кол-во потоков, которые могут получить доступ к элементам кода.

12.Что такое неблокирующие средства синхронизации?

13.Для чего можно использовать класс Timer?

Для выполнения каких-либо повторяющихся действий. С помощью Timer их можно вызывать бесконечно через одинаковые промежутки времени.