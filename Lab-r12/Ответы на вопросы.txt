1. Что такое Рефлексия?

Рефлексия представляет собой процесс выявления типов во время выполнения приложения. Каждое приложение содержит набор используемых классов, интерфейсов, а также их методов, свойств и прочих кирпичиков, из которых складывается приложение. И рефлексия как раз и позволяет определить все эти составные элементы приложения.

2. Какие есть способы получения объекта типа Type. Приведите три способа получения типа.

Type myType = typeof(User);
Type myType = user.GetType();
Type myType = Type.GetType("TestConsole.User");

3. Охарактеризуйте классы из пространства имен System.Reflection.

Assembly	Методы для загрузки, описания и выполнения разнообразных операций над сборкой
AssemblyName	Информация о сборке (идентификатор, версия, язык реализации)
EventInfo	Информация о событиях
FieldInfo	Информация о полях
MemberInfo	Абстрактный базовый класс, определяющий общие члены для EventInfo, FieldInfo, MethodInfo, PropertyInfo
MethodInfo	Информация о методе
Module	Позволяет обратиться к модулю в многофайловой сборке
ParameterInfo	Информация о параметре
PropertyInfo	Информация о свойстве
ConstructorInfo Класс, представляющий конструктор

4. Как можно использовать класс System.Type? Перечислите его свойства и методы.

Класс System.Type представляет изучаемый тип, инкапсулируя всю информацию о нем. С помощью его свойств и методов можно получить эту информацию.

Метод FindMembers() возвращает массив объектов MemberInfo данного типа
Метод GetConstructors() возвращает все конструкторы данного типа в виде набора объектов ConstructorInfo
Метод GetEvents() возвращает все события данного типа в виде массива объектов EventInfo
Метод GetFields() возвращает все поля данного типа в виде массива объектов FieldInfo
Метод GetInterfaces() получает все реализуемые данным типом интерфейсы в виде массива объектов Type
Метод GetMembers() возвращает все члены типа в виде массива объектов MemberInfo
Метод GetMethods() получает все методы типа в виде массива объектов MethodInfo
Метод GetProperties() получает все свойства в виде массива объектов PropertyInfo
Свойство IsAbstract возвращает true, если тип является абстрактным
Свойство IsArray возвращает true, если тип является массивом
Свойство IsClass возвращает true, если тип представляет класс
Свойство IsEnum возвращает true, если тип является перечислением
Свойство IsInterface возвращает true, если тип представляет интерфейс

5. Как динамически загрузить сборку в приложение?

Assembly asm = Assembly.LoadFrom("Data.exe");

6. Что такое позднее (раннее) связывание?

Механизм отражения позволяет реализовать на платформе .NET позднее связывание (late binding).
Обозначает процесс динамической загрузки сборок и типов при работе приложения, создание экземпляров типов и работу с их элементами.
Позволяет создавать расширяемые приложения, когда дополнительный функционал программы неизвестен, и его могут разработать и подключить сторонние разработчики