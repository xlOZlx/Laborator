1.	Что такое производный и базовый классы? 

В языке C# класс, который наследуется, называется базовым, а класс,
 который наследует, —производным. Следовательно, производный класс
 представляет собой специализированный вариант базового класса.

2.	В чем заключена основная задача наследования? 
Наследование (inheritance) является одним из ключевых моментов ООП.
 Благодаря наследованию один класс может унаследовать функциональность
 другого класса.

3.	Пусть базовый класс содержит метод basefunc(),
 а производный класс не имеет метода с таким именем.
 Может ли объект производного класса иметь доступ к методу basefunc()?
 Если да, то при каких условиях?

При модификаторах доступа public,internal,protected.

4.	Напишите объявление конструктора без аргументов для производного класса B,
 который будет вызывать конструктор без аргументов базового класса A. 

public class B : A
{
	Public B() : bace()
		{}	
}

5.	Что такое полиморфизм? Приведите пример. 
Полиморфизм означает, что один метод (св-во) может иметь несколько различных реализаций.

6. Определите назначение виртуальных функций.
Виртуальная функция — это функция-член, которую предполагается переопределить в производных классах. 

6.	Кому доступны переменные с модификатором protected? 
Для кода данного класса или структуры, а также для производного класса.

7.	Наследуются ли переменные с модификатором private?
Нет.

8.	As, is – что это, как применяется?

Оператор is проверяет совместимость объекта с данным типом, а в качестве результата
 выдает значение булева типа, либо правду, либо ложь. Оператор is никогда не генерирует исключение,
 он работает со всеми типами. Например. int i=8; Object o=new Object(); Boolean b=(i is Object); //b будет
 равно true Boolean b1=(o is int); //b1 будет равно false Если ссылка равна null, то оператор возвращает ложь,
 так как нет объекта, для которого нужно определить тип. Оператор as работает со ссылочными типами,
 он производит нужное преобразование типов, если оно возможно и возвращает null, если оно невозможно.
 Команда A a=o as A; будет выполнена успешно, но в ссылку а будет записан null, и любое обращение к а как к объекту,
 например, a.ToString(); вызовет генерацию исключения. Проверку того, не получила ли ссылка нулевого значения,
 должен выполнить программист. В нашем примере она будет выглядеть так if(a!=null)a.ToString().

10. Поддерживает ли C# множественное наследование? 
Наследование классов – нет, интерфейсов – да.

11. Можно ли запретить наследование от класса?
Можно, с помощью модификатора sealed.

 12. Можно ли разрешить наследование класса, но запретить перекрытие метода? 
Да. Указываем класс как public, а метод как sealed.

13. Что такое абстрактный класс?
Это класс, объект которого не может быть создан. Такой класс должен иметь класс-наследник
 с реализацией абстрактных методов. Абстрактный класс – это фактически чертёж
 нормального класса без реализации. 


14. В каком случае вы обязаны объявить класс абстрактным? 
1. В том случае, если класс является наследником абстрактного класса,
 но не все методы базового класса перекрыты и имеют реализацию.
2. В том случае, если хотя бы один метод класса является абстрактным.

15. В чем разница между абстрактными и виртуальными классами? Между виртуальными и абстрактными методами? 
Абстрактный класс это класс, содержащий хотя бы один метод (abstract)..
Виртуальный метод имеет реализацию и м.б. переопределен в производном классе.
 Абстрактный метод не имеет реализацию, только описание метода, который д.б. реализован в производных классах. 


16. Какие компоненты класса могут быть виртуальными? 
Свойства,методы.

17. Что такое интерфейс? 
Интерфейсы, как и классы, определяют набор свойств, методов и событий.
 Но, в отличие от классов, они не содержат их реализации. Интерфейсы реализуются классами
 и определяются как самостоятельные сущности.

18. Как работать с объектом через унаследованный интерфейс? 



19. Приведите пример явной реализации интерфейса. 
Если в нескольких интерфейсах имеются одинаковые методы и класс наследует сразу все эти интерфейсы,
 то при использовании того метода возникает конфликт. Чтобы избежат этого, мы должен указать имя интерфейса,
 потом точку и указать имя метода. Это и называется явной реализацией метода. Тогда компилятор точно будет знать,
 чей метод использует класс. 

20. Почему нельзя указать модификатор видимости для методов интерфейса? 
Потому что все они должны иметь модификатор public, который и установлен по умолчанию.


21. Можно ли наследовать от нескольких интерфейсов? 
Да.

22. Назовите отличия между интерфейсом и абстрактным классом.
В интерфейсе все методы (свойства и т.д.) абстрактны и не имеют реализации. В абстрактном классе некоторые
 методы могут быть реализованы. В интерфейсе члены не могут иметь модификатора видимости
 (все они являются public по умолчанию), а в абстрактном классе члены могут иметь модификатор видимости.

 23. Для чего используются стандартные интерфейсы ICloneable, IComparable, IComparer, lEnumerable? 
Чтобы наследовать стандартные методы.

24. В какой строке приведенного ниже фрагмента листинга не содержится ошибки?
  
1 – правильный.

 25. Что будет выведено на консоль в результате выполнения следующего фрагмента?
  
3 4


26. Что будет выведено на консоль в результате выполнения следующего фрагмента кода?
 
А
В

 27. Чем может быть M4 если дано следующее определение: 
  
2

28. Выберите верное присваивание для объектов, определенных в листинге.  
1,3.

29. Что будет выведено на консоль в результате выполнения следующего фрагмента, если раскомментировать строчку 1?  
2.



30. В какой строке приведенного ниже фрагмента листинга содержится ошибка?
 
3.

31. Почему приведенный ниже фрагмент листинга содержит ошибку? 
 
Нельзя создать объект абстрактного класса.

32. В какой строке может быть ошибка компиляции? 
 
4.

33. Что будет выведено на консоль в результате выполнения следующего фрагмента листинга: 
 
new G.