1. Что такое сериализация, десериализация?

Сериализация представляет процесс преобразования какого-либо объекта в поток байтов. После преобразования мы можем этот поток 
байтов или записать на диск или сохранить его временно в памяти. А при необходимости можно выполнить обратный процесс - десериализацию, 
то есть получить из потока байтов ранее сохраненный объект.

2. Какие существуют форматы сериализации? Поясните структуру для каждого формата. Какие классы для работы с ними существуют в .NET?

Xml, Json, SOAP, бинарный.
Xml сериализует в виде xml файла.
Json сериализует в виде Json файла.
SOAP сериализует в виде SOAP файла.
Бинарный сериализует в виде бинарного потока.

3. Какие классы существуют в пространстве имен System.Xml?

XmlNode: представляет узел xml. В качестве узла может использоваться весь документ, так и отдельный элемент

XmlDocument: представляет весь xml-документ

XmlElement: представляет отдельный элемент. Наследуется от класса XmlNode

XmlAttribute: представляет атрибут элемента

XmlText: представляет значение элемента в виде текста, то есть тот текст, который находится в элементе между его открывающим и закрывающим тегами

XmlComment: представляет комментарий в xml

XmlNodeList: используется для работы со списком узлов

4. Какие атрибуты используются для настройки XML сериализации?

5. В чем отличие BinaryFormatter или SoapFormatter?

Soap никак не зависит от типа операционной системы и т.д.

6. Что такое сериализация контрактов данных, контракт данных?

Контракт данных – это тип (класс или структура), объект которого описывает информационный фрагмент. Подразумевается, что этот фрагмент 
может быть сохранён, а затем восстановлен. Работу с контрактами данных можно рассматривать как один из механизмов сериализации.

Если в качестве контракта данных используется обычный класс, информационный фрагмент образуют открытые поля и свойства класса. 
Можно пометить тип атрибутом [DataContract]. Тогда информационный фрагмент будут составлять поля и свойства, имеющие атрибут[DataMember]1. 
Видимость элементов при этом роли не играет.

7. Где и для чего используются атрибуты [OnSerializing], [OnSerialized], [OnDeserializing], [OnDeserialized]?

Их можно использовать для определения блоков программы или действий, которые необходимо выполнить, например, после десирализации.

8. Что такое XPath? Приведите пример.

XPath представляет язык запросов в XML. Он позволяет выбирать элементы, соответствующие определенному селектору.
.

выбор текущего узла

..

выбор родительского узла

*

выбор всех дочерних узлов текущего узла

user

выбор всех узлов с определенным именем, в данном случае с именем "user"

@name

выбор атрибута текущего узла, после знака @ указывается название атрибута (в данном случае "name")

@+

выбор всех атрибутов текущего узла

element[3]

выбор определенного дочернего узла по индексу, в данном случае третьего узла

//user

выбор в документе всех узлов с именем "user"

user[@name='Bill Gates']

выбор элементов с определенным значением атрибута. В данном случае выбираются все элементы "user" с атрибутом name='Bill Gates'

user[company='Microsoft']

выбор элементов с определенным значением вложенного элемента. В данном случае выбираются все элементы "user", у которых дочерний элемент 
"company" имеет значение 'Microsoft'

//user/company

выбор в документе всех узлов с именем "company", которые находятся в элементах "user"

9. Какие возможности дает LINQ to Xml. Приведите примеры

Еще один подход к работе с Xml представляет технология LINQ to XML. Вся функциональность LINQ to XML содержится в пространстве имен 
System.Xml.Linq. Рассмотрим основные классы этого пространства имен:

XAttribute: представляет атрибут xml-элемента

XComment: представляет комментарий

XDocument: представляет весь xml-документ

XElement: представляет отдельный xml-элемент

Ключевым классом является XElement, который позволяет получать вложенные элементы и управлять ими. Среди его методов можно отметить следующие:

Add(): добавляет новый атрибут или элемент

Attributes(): возвращает коллекцию атрибутов для данного элемента

Elements(): возвращает все дочерние элементы данного элемента

Remove(): удаляет данный элемент из родительского объекта

RemoveAll(): удаляет все дочерние элементы и атрибуты у данного элемента